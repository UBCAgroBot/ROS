# Compiling code into container and uploading to repository
name: Delivery Pipeline
run-name: Delivery pipeline trigged by ${{ github.actor }} 

on: 
  push: # pushes to the main branch only occur if the merge request has been accepted
    branches:
      - main

  workflow_call: 
    outputs:
      version:
        description: "The latest docker image version"
        value: ${{ jobs.build.outputs.container_version }}
    inputs:
      branch:
        required: false
        default: main
        type: string
      deployment:
        required: false
        default: true
        type: boolean

  workflow_dispatch:
    inputs:
      branch:
        description: 'Which branch would you like to compile and upload?'
        required: false
        default: main
        type: string
      deployment: 
        description: 'Would you like to run unit and benchmarking tests?'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: self-hosted
    outputs:
      container_version: ${{ steps.get_next_version.outputs.version }}
    steps: 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Retrieve Docker Hub tags and determine the next version
        id: get_next_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          IMAGE_PREFIX="jetson_ros:${BRANCH_NAME}-v"

          TAGS=$(wget -q -O - "https://hub.docker.com/v2/namespaces/agrobotappliedai/repositories/jetsoncontainers-dev/tags?page_size=100" | grep -o '"name": *"[^"]*' | grep -o '[^"]*$')
          VERSION_TAGS=$(echo "$TAGS" | grep -E "^${IMAGE_PREFIX}[0-9]+$" || true)

          if [ -z "$VERSION_TAGS" ]; then
            echo "No matching tags found, setting version to 1"
            echo "version=1" >> $GITHUB_OUTPUT
          else
            MAX_VERSION=$(echo "$VERSION_TAGS" | sed -e "s/^${IMAGE_PREFIX}//" | sort -n | tail -1)
            NEXT_VERSION=$((MAX_VERSION + 1))
            echo "Found existing versions. Incrementing to version $NEXT_VERSION"
            echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          fi
      
      # context needs to be sorted
      # - name: Build and push multi-platform Docker image
      #   uses: docker/build-push-action@v4
      #   with:
      #     # context: '.'
      #     push: true
      #     tags: 'agrobotappliedai/jetson_ros:${ github.events.inputs.branch }-latest', 'agrobotappliedai/jetson_ros:${ github.events.inputs.branch }-v${ steps.get_next_version.outputs.version }'
      #     platforms: linux/amd64,linux/arm64
      #     file: Dockerfile